# The Computer Language Benchmarks Game
# $Id: my.linux.ini,v 1.1 2012/12/29 19:19:32 igouy-guest Exp $

;;; 1) WHERE ARE THE TOOLS NEEDED TO COMPILE OR RUN THE PROGRAMS?
;;; 2) WHAT COMMAND LINE SHOULD BE USED TO RUN THE PROGRAMS?
;;; 3) WHICH PROGRAMS AND LANGUAGE IMPLEMENTATIONS SHOULD BE MEASURED?
;;; 4) WHAT DATA VALUES SHOULD THE PROGRAMS BE MEASURED FOR?
;;; 5) WHAT TOOLS SHOULD BE USED TO CHECK PROGRAM OUTPUT IS CORRECT?
;;; 6) WHAT COMMAND LINE OPTIONS SHOULD BE USED FOR SPECIFIC PROGRAMS?
;;; 7) HOW MANY MEASUREMENTS SHOULD BE MADE FOR EACH PROGRAM?



;;; 1) WHERE ARE THE TOOLS NEEDED TO COMPILE OR RUN THE PROGRAMS?

[tools]

; some of these need to be available to MAKE as well as substituted
; in commandlines, so we'll export them as shell variables

; assume python is on the path
PYTHON = python

; java and javac are not on the path
JDKRUN = java
JDKC = javac

;JDKRUN = /usr/local/src/jdk1.6.0_25/bin/java
;JDKC = /usr/local/src/jdk1.6.0_25/bin/javac

SCALAC = scalac
SCALARUN = scala

SCALAJSC = scalajsc
SCALAJSLD = scalajsld
SCALAJS_PREAMBLE = ~/benchmarksgame/scalajs_preamble.sh

GCC = gcc
GCCOPTS = -std=c99 -I /usr/include/apr-1.0/ -I /usr/include/glib-2.0/ -I /usr/lib/x86_64-linux-gnu/glib-2.0/include/
GCC_LINKOPTS = -lm -pthread -lpcre

;;; 2) WHAT COMMAND LINE SHOULD BE USED TO RUN THE PROGRAMS?

[commandlines]

; commandlines are split on spaces, so "a b" and 'a b' will be split

; %X %T %B %I %A in commandlines are replaced like this:
;
; nbody.python-4.python %X = nbody.python-4.python
; nbody.python-4.python %T = nbody
; nbody.python-4.python %B = nbody.python-4
; nbody.python-4.python %I = 4
;
; %A = [testrange] value or 0 when the program takes input from stdin

lua = luajit %X %A

python3 = $PYTHON %X %A

; (For multiprocessing make sure the extension is .py)
;python = $PYTHON -O %B.py %A

java = $JDKRUN $JDKFLAGS -server %T %A

;javaxint = $JDKRUN $JDKFLAGS -server -Xint %T %A

scala = $SCALARUN %T %A

scalajs = nodejs %T.js %A

dart = dart %X %A

javascript = nodejs %X %A

;;; 3) WHICH PROGRAMS AND LANGUAGE IMPLEMENTATIONS SHOULD BE MEASURED?

[filters]

; ONLYDIRS explicitly listed are searched for source code files

onlydirs =
  binarytrees
  binarytreesredux
  chameneosredux
  fannkuchredux
  fasta
  fastaredux
  Include
  knucleotide
  mandelbrot
  meteor
  nbody
  pidigits
  regexdna
  revcomp
  spectralnorm
  threadring/



; ALLOW these helper file extensions to be available unchanged
; from the working directory - they will never be measured

allow =



; ONLY measure files with these extensions
; if there are none, measure files with any extension not ALLOWed or IGNOREd

only =
  dart
  java
  javascript
  scala
  scalajs
  python3
  gcc
  lua


; IGNORE files with these extensions, if there are no ONLY extensions

ignore =
 txt


[alias]

; x = y z - additionally measure source file x with implementations y and z

scala = scalajs


[build]

; compile source code (or rename source files)
; using make with my.linux.Makefile

make =
 java javaxint scala scalajs gcc



;;; 4) WHAT DATA VALUES SHOULD THE PROGRAMS BE MEASURED FOR?

[testrange]

; One or more input values, programs will be run at least once
; with each input value replacing %A in the command line.
;
; Or when there's [testdata] for programs the input value
; makes up part of the filename - the file contents will be
; redirected to stdin.
;
; In this example, the input file for regexdna should be named
;    regexdna-input10000.txt
; and should be located in
;    bencher/tmp/regexdna


binarytrees = 16 ;12 16 20
chameneosredux = 600000 ;60000 600000 6000000
fannkuchredux = 11 ;10 11 12
fasta = 2500000 ;250000 2500000 25000000
fastaredux = 2500000 ;250000 2500000 25000000
knucleotide = 2500000 ;250000 2500000 25000000
mandelbrot = 4000 ;1000 4000 16000
meteor = 2098
nbody = 5000000 ;500000 5000000 50000000
pidigits = 6000 ;2000 6000 10000
regexdna = 10000
revcomp = 2500000 ;250000 2500000 25000000
spectralnorm = 300 ;500 3000 5500
threadring = 5000000 ;500000 5000000 50000000

[testdata]

knucleotide = ../knucleotide-input.txt
regexdna = ../regexdna-input.txt
revcomp = ../revcomp-input.txt



;;; 5) WHAT TOOLS SHOULD BE USED TO CHECK PROGRAM OUTPUT IS CORRECT?

[outputcheck]

; Program output is usually checked against an "expected" output
; file. If there's no "expected" output file then the output of the
; first program measured for that test becomes the "expected" output
; - so make sure that output is correct!

; The default output check uses GNU diff.
; If GNU diff isn't found the default output check uses filecmp.cmp
;
; Other options are:
;    prevent output check, use GNU cmp, use ndiff



; prevent output being checked for the named test

notchecked =
; nbody chameneosredux


; check binary output with cmp for the named test

binarycmp =
 mandelbrot



[ndiff_outputcheck]

; check output with ndiff and these parameters for the named test

;chameneosredux = -fields 2-10
;nbody = -abserr 1.0e-8



;;; 6) WHAT COMMAND LINE OPTIONS SHOULD BE USED FOR SPECIFIC PROGRAMS?

; ENVIRONMENT for specific tests
; some of these need to be available to MAKE as well as substituted
; in commandlines, so we'll export them as shell variables


[nbody]

;JDKFLAGS = -Xmx8m



;;; 7) HOW MANY MEASUREMENTS SHOULD BE MADE FOR EACH PROGRAM?

[measure]

; how many repeated measurements at the same [testrange] value?
runs = 6

; repeat measurements at every [testrange] value
; or just the largest? (True or False)
repeatevery = False

; how many seconds before we timeout a program?
maxtime = 300

; only do repeated measurements for [testrange] values which
; took less than cutoff seconds
cutoff = 120

logfilemax = 102400

delay = 0.2 ; memory sampling delay for linux, not used for win32



;;; OVERRIDE DEFAULT LOCATIONS

[dirs]

; bencher
;bencher = ~/bencher/

; root for source code directories of programs that should be measured
src = ~/benchmarksgame/bench/

; root for temporary files
;tmp = ~/bencher/tmp/

; makefile path
;makefile = ~/bencher/makefiles/my.linux.Makefile

; if not empty, somewhere all csv summary data files should be put
;dat_sweep = ~/bencher/summary/

; if not empty, somewhere all source code markup should be put
;code_sweep = ~/bencher/run_markup/

; if not empty, somewhere all program log text files should be put
;log_sweep = ~/bencher/run_logs/




